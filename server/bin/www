#!/usr/bin/env node

/* Module dependencies */
var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var logger = require('../logger');


/* Server Initialization */
var intake = require('../modules/intake');
intake.initValidUsers()
    .then(function(){ logger.debug('Updated validUsers collection with data from Intake Cards.'); })
    .catch(function(err) { logger.warn('Could not update the validUsers collection. %s', err); });

/* Get port from environment and store in Express. */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/* Create HTTP server. */
var server = http.createServer(app);

/* Initialize socket.io to handle global socket messages */
var io = require('../socket/')(server);



/* Listen on provided port, on all network interfaces. */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 * @param val
 * @returns {*}
 */
function normalizePort(val) {
    var port = parseInt(val, 10);
    // named pipe
    if (isNaN(port)) { return val; }
    // port number
    if (port >= 0) { return port; }
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param error
 */
function onError(error) {
  if (error.syscall !== 'listen') { throw error; }
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    logger.debug('Listening on port %s', port);
}
